using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VowpalWabbit.Serializer.Interfaces;

namespace VowpalWabbit.Serializer.Visitor
{
    public class VowpalWabbitStringVisitor : IVowpalWabbitVisitor
    {
        private StringBuilder example;

        public VowpalWabbitStringVisitor()
        {
            this.example = new StringBuilder();
        }

        public string Example { get { return this.example.ToString(); } }

        private void VisitNamespace(INamespace @namespace)
        {
            this.example.AppendFormat(
                "|{0}{1} ",
                @namespace.FeatureGroup,
                @namespace.Name);
        }

        public void Visit<T>(INamespaceDense<T> namespaceDense)
        {
            // TODO: move to compiled Lambda
            if (namespaceDense.DenseFeature.Value == null)
            {
                return;
            }

            this.VisitNamespace(namespaceDense);
            this.example.Append(string.Join(" ", namespaceDense.DenseFeature.Value.Select(v => ":" + v)));
            this.example.Append(" ");
        }

        #region Dictionary support
        /*        
        public void Visit<TValue>(IFeature<IDictionary<Int16, TValue>> feature)
        {
            this.Visit(feature, key => (UInt32)key);
        }

        public void Visit<TValue>(IFeature<IDictionary<Int32, TValue>> feature)
        {
            this.Visit(feature, key => (UInt32)key);
        }

        // TODO: not clear when to hash... should we check for negative values?
        public void Visit<TValue>(IFeature<IDictionary<Int64, TValue>> feature)
        {
            this.Visit(feature, key => (UInt32)key);
        }

        public void Visit<TValue>(IFeature<IDictionary<UInt16, TValue>> feature)
        {
            this.Visit(feature, key => key);
        }
        public void Visit<TValue>(IFeature<IDictionary<UInt32, TValue>> feature)
        {
            this.Visit(feature, key => key);
        }
        */

        public void Visit<TKey, TValue>(IFeature<IDictionary<TKey, TValue>> feature)
        {
            // TODO: call VwHash
            this.Visit(feature, key => Convert.ToString(key));
        }
        private void Visit<TKey, TValue>(IFeature<IDictionary<TKey, TValue>> feature, Func<TKey, string> keyMapper)
        {
            // lhs: int, hash(string), hash(long), hash(*) -> uint
            // rhs: int, short, long, float, bool -> float
            foreach (var kvp in feature.Value)
            {
                example.AppendFormat(
                    CultureInfo.InvariantCulture,
                    "{0}:{1} ",
                    keyMapper(kvp.Key),
                    kvp.Value);
            }
        }

        #endregion

        public void Visit(IFeature<string> feature)
        {
            this.Visit<string>(feature);
        }

        public void Visit<TValue>(IFeature<IEnumerable<TValue>> feature)
        {
            // TODO: call VwHash
            // this.Visit(feature, key => (UInt32)Convert.ToString(key).GetHashCode());
            var index = 0;
            foreach (var item in feature.Value)
            {
                this.example.AppendFormat(
                    CultureInfo.InvariantCulture,
                    "{0}:{1} ",
                    index++,
                    item);                
            }
        }

        public void Visit<T>(IFeature<T> feature)
        {
            // can't specify constraints
            var valueType = feature.Value.GetType();
            if (valueType.IsEnum)
            {
                this.example.AppendFormat(
                    CultureInfo.InvariantCulture, 
                    "{0}_{1} ", 
                    feature.Name, 
                    Enum.GetName(valueType, feature.Value));
                return;
            }

            if (feature.Enumerize)
            {
                this.example.AppendFormat(
                    CultureInfo.InvariantCulture, 
                    "{0}_{1} ",
                    feature.Name,
                    feature.Value);
                return;
            }

            // TODO: more support for built-in types
            example.Append(string.Format(
                CultureInfo.InvariantCulture, 
                "{0}:{1} ", 
                feature.Name, 
                feature.Value));
        }

        public void Visit(INamespaceSparse namespaceSparse, Action visitFeatures)
        {
            // TODO: what if there is no output produced in visitFeatures

            this.VisitNamespace(namespaceSparse);

            // alternative: namespaceSparse.VisitFeatures(); (<-- this would be Action generated by VWSerializer)
            visitFeatures();

            this.example.Append(" ");
        }

        public void Visit(string comment, INamespace[] namespaces, Action visitNamespaces)
        {
            this.example.AppendFormat("`{0} ", comment);

            visitNamespaces();

            this.example.AppendLine();

            // TODO: it's unclear who generates the separating new line in the case of PerAction features
        }
    }
}
